/*
 * Note: this file originally auto-generated by mib2c using
 *       version : 1.50 $ of : mfd-top.m2c,v $
 *
 * $Id:$
 */
#ifndef DOT1DTPFDBTABLE_H
#define DOT1DTPFDBTABLE_H

#ifdef __cplusplus
extern "C" {
#endif


/** @addtogroup misc misc: Miscellaneous routines
 *
 * @{
 */
#include <net-snmp/library/asn1.h>

/* other required module components */
/* *INDENT-OFF*  */
config_add_mib(BRIDGE-MIB)
config_require(BRIDGE-MIB/dot1dTpFdbTable/dot1dTpFdbTable_interface)
config_require(BRIDGE-MIB/dot1dTpFdbTable/dot1dTpFdbTable_data_access)
config_require(BRIDGE-MIB/dot1dTpFdbTable/dot1dTpFdbTable_data_get)
config_require(BRIDGE-MIB/dot1dTpFdbTable/dot1dTpFdbTable_data_set)
/* *INDENT-ON*  */

/* OID and column number definitions for dot1dTpFdbTable */
#include "dot1dTpFdbTable_oids.h"

/* enum definions */
#include "dot1dTpFdbTable_enums.h"

/* *********************************************************************
 * function declarations
 */
void init_dot1dTpFdbTable(void);
void shutdown_dot1dTpFdbTable(void);

/* *********************************************************************
 * Table declarations
 */
/**********************************************************************
 **********************************************************************
 ***
 *** Table dot1dTpFdbTable
 ***
 **********************************************************************
 **********************************************************************/
/*
 * BRIDGE-MIB::dot1dTpFdbTable is subid 3 of dot1dTp.
 * Its status is Current.
 * OID: .1.3.6.1.2.1.17.4.3, length: 9
*/
/* *********************************************************************
 * When you register your mib, you get to provide a generic
 * pointer that will be passed back to you for most of the
 * functions calls.
 *
 * TODO:100:r: Review all context structures
 */
/*
 * TODO:101:o: |-> Review dot1dTpFdbTable registration context.
 */
typedef netsnmp_data_list dot1dTpFdbTable_registration;

/**********************************************************************/
/*
 * TODO:110:r: |-> Review dot1dTpFdbTable data context structure.
 * This structure is used to represent the data for dot1dTpFdbTable.
 */
/*
 * This structure contains storage for all the columns defined in the
 * dot1dTpFdbTable.
 */
typedef struct dot1dTpFdbTable_data_s {
    
	/*
	 * dot1dTpFdbPort(2)/INTEGER32/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
	 */
	long dot1dTpFdbPort;
    
        /*
         * dot1dTpFdbStatus(3)/INTEGER/ASN_INTEGER/long(u_long)//l/A/w/E/r/d/h
         */
	u_long dot1dTpFdbStatus;
    
} dot1dTpFdbTable_data;


/*
 * TODO:120:r: |-> Review dot1dTpFdbTable mib index.
 * This structure is used to represent the index for dot1dTpFdbTable.
 */
typedef struct dot1dTpFdbTable_mib_index_s {

	/*
	 * dot1dTpFdbAddress(1)/MacAddress/ASN_OCTET_STR/char(char)//L/A/w/e/R/d/H
	 */
	char dot1dTpFdbAddress[6];
	size_t dot1dTpFdbAddress_len;
} dot1dTpFdbTable_mib_index;

/*
 * TODO:121:r: |   |-> Review dot1dTpFdbTable max index length.
 * If you KNOW that your indexes will never exceed a certain
 * length, update this macro to that length.
 *
 * BE VERY CAREFUL TO TAKE INTO ACCOUNT THE MAXIMUM
 * POSSIBLE LENGHT FOR EVERY VARIABLE LENGTH INDEX!
 * Guessing 128 - col/entry(2)  - oid len(9)
 */
#define MAX_dot1dTpFdbTable_IDX_LEN	6


/* *********************************************************************
 * TODO:130:o: |-> Review dot1dTpFdbTable Row request (rowreq) context.
 * When your functions are called, you will be passed a
 * dot1dTpFdbTable_rowreq_ctx pointer.
 */
typedef struct dot1dTpFdbTable_rowreq_ctx_s {
	/** this must be first for container compare to work */
	netsnmp_index			oid_idx;
	oid				oid_tmp[MAX_dot1dTpFdbTable_IDX_LEN];
    
	dot1dTpFdbTable_mib_index	tbl_idx;
    
	dot1dTpFdbTable_data		data;

	/*
	 * flags per row. Currently, the first (lower) 8 bits are reserved
	 * for the user. See mfd.h for other flags.
	 */
	u_int				rowreq_flags;

	/*
	 * TODO:131:o: |   |-> Add useful data to dot1dTpFdbTable rowreq context.
	 */
    
	/*
	 * storage for future expansion
	 */
	netsnmp_data_list		*dot1dTpFdbTable_data_list;
} dot1dTpFdbTable_rowreq_ctx;

typedef struct dot1dTpFdbTable_ref_rowreq_ctx_s {
	dot1dTpFdbTable_rowreq_ctx	*rowreq_ctx;
} dot1dTpFdbTable_ref_rowreq_ctx;

/* *********************************************************************
 * function prototypes
 */
int dot1dTpFdbTable_pre_request(dot1dTpFdbTable_registration *user_context);
int dot1dTpFdbTable_post_request(dot1dTpFdbTable_registration *user_context,
				 int rc);

int dot1dTpFdbTable_rowreq_ctx_init(dot1dTpFdbTable_rowreq_ctx *rowreq_ctx,
				    void *user_init_ctx);
void dot1dTpFdbTable_rowreq_ctx_cleanup(dot1dTpFdbTable_rowreq_ctx *rowreq_ctx);


dot1dTpFdbTable_rowreq_ctx *dot1dTpFdbTable_row_find_by_mib_index(dot1dTpFdbTable_mib_index *mib_idx);

extern oid dot1dTpFdbTable_oid[];
extern int dot1dTpFdbTable_oid_size;


#include "dot1dTpFdbTable_interface.h"
#include "dot1dTpFdbTable_data_access.h"
#include "dot1dTpFdbTable_data_get.h"
#include "dot1dTpFdbTable_data_set.h"

/*
 * DUMMY markers, ignore
 *
 * TODO:099:x: *************************************************************
 * TODO:199:x: *************************************************************
 * TODO:299:x: *************************************************************
 * TODO:399:x: *************************************************************
 * TODO:499:x: *************************************************************
 */

#ifdef __cplusplus
}
#endif

#endif /* DOT1DTPFDBTABLE_H */
/** @} */
